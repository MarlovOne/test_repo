// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/blabla.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class blablaBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  blablaBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  blablaBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  int factorial(
    int input,
  ) {
    return _factorial(
      input,
    );
  }

  late final _factorialPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('factorial');
  late final _factorial = _factorialPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> getVersion() {
    return _getVersion();
  }

  late final _getVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getVersion');
  late final _getVersion =
      _getVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void process_image(
    ffi.Pointer<ffi.Uint8> input_data,
    int width,
    int height,
    int channels,
    ffi.Pointer<ffi.Uint8> output_data,
  ) {
    return _process_image(
      input_data,
      width,
      height,
      channels,
      output_data,
    );
  }

  late final _process_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('process_image');
  late final _process_image = _process_imagePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, int, int, ffi.Pointer<ffi.Uint8>)>();
}
