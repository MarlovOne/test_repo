name: Test Windows Signing

on:
  push:
    paths:
      - 'scripts/sign_windows.ps1'
      - '.github/workflows/test-windows-signing.yml'
  pull_request:
    paths:
      - 'scripts/sign_windows.ps1'
      - '.github/workflows/test-windows-signing.yml'
  workflow_dispatch:

jobs:
  test-signing:
    runs-on: windows-latest
    env:
      SM_HOST: ${{ secrets.SM_HOST }}
      SM_API_KEY: ${{ secrets.SM_API_KEY }}
      SM_CLIENT_CERT_FILE: ${{ secrets.SM_CLIENT_CERT_FILE }}
      SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
      SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}
      SM_CERTIFICATE_CONTENT: ${{ secrets.SM_CERTIFICATE_CONTENT }}
      SM_CERT_ALIAS: ${{ secrets.SM_CERT_ALIAS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test file
        run: |
          # Create a test directory
          New-Item -ItemType Directory -Path "test-signing" -Force
          # Create a dummy .exe file
          "This is a test file" | Out-File -FilePath "test-signing/test.exe" -Encoding ASCII

      - name: Set up signtool
        shell: pwsh
        run: |
          # Find signtool.exe in the Windows SDK
          $sdkPath = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22000.0\x64"
          if (Test-Path $sdkPath) {
            $env:PATH = "$sdkPath;$env:PATH"
            Write-Host "Added signtool to PATH: $sdkPath"
          } else {
            Write-Host "Searching for signtool.exe..."
            $signtool = Get-ChildItem -Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin" -Recurse -Filter "signtool.exe" | Select-Object -First 1
            if ($signtool) {
              $env:PATH = "$($signtool.DirectoryName);$env:PATH"
              Write-Host "Added signtool to PATH: $($signtool.DirectoryName)"
            } else {
              Write-Error "Could not find signtool.exe in Windows SDK"
              exit 1
            }
          }

      - name: Set variables
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert Keylocker Tools" >> $GITHUB_PATH

      - name: Test signing script
        run: |
          # Run the script with -ForceKSPSetup to test the setup process
          # The script should now exit with an error code if signing/verification fails
          .\scripts\sign_windows.ps1 -InputPath "test-signing" -ForceKSPSetup 