name: CI-iOS
on:
  pull_request:
  push:
    tags:
      - '*'
    branches:
      - main
      - dev

jobs:
  Test_iOS:
    name: ${{matrix.os}} ${{matrix.build_type}} ${{matrix.packaging_maintainer_mode == 'ON' && '(maintainer mode)' || ''}}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
        build_type:
          - Release
          - Debug
        packaging_maintainer_mode:
          - ON
        build_shared_libs:
          # - ON
          - OFF
        is_tagged:
          - ${{ startsWith(github.ref, 'refs/tags/') }}

        exclude:
          # Exclude Debug builds if tag is present - we aare packaging only release builds
          - is_tagged: true
            build_type: Debug
          
          # Exclude Release builds if tag is not present
          - is_tagged: false
            build_type: Release  

    steps:
      - uses: actions/checkout@v4
      
      - name: Load Constants
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          # It is important not to install llvm on macos, but use the one that comes with the system
          # Otherwise weird dyld errors will happen
          compiler: ${{ !(contains(matrix.os, 'macos') && contains(matrix.compiler, 'llvm')) && matrix.compiler || '' }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.LLVM_VERSION }}
          cppcheck: true
          gcovr: true
          opencppcoverage: true

      - name: Configure CMake
        run: |
          ./scripts/make_iOS.sh \
            --build-type ${{matrix.build_type}} \
            --maintainer-mode ${{matrix.packaging_maintainer_mode}} \
            --git-sha ${{ github.sha }} \
            --build-dir ${{ env.BUILD_DIR }}

      - name: CPack
        if: matrix.build_type == 'Release'
        working-directory: ${{ env.BUILD_DIR }}
        run: |
            cpack -C ${{matrix.build_type}} -G ${{ contains(matrix.os, 'windows') && 'ZIP' || 'TBZ2' }}
 
      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v2
        if: ${{ matrix.is_tagged && matrix.build_type == 'Release' }}
        with:
          token: ${{ secrets.GH_PAT }}
          files: |
            ${{ env.BUILD_DIR }}/*-*${{ matrix.build_type }}*-*.*

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.4'
          channel: 'stable'
 
      - name: Install Flutter Dependencies
        run: |
          cd blabla
          flutter pub get
          dart run ffigen --config ffigen.yaml

      - name: Build App
        run: |
          cd app
          flutter pub get
          flutter build ios \
            --${{ matrix.build_type == 'Release' && 'release' || 'debug' }}  \
            --verbose \
            --no-codesign

      - name: Package Runner.app into zip
        if: ${{ matrix.is_tagged && matrix.build_type == 'Release' }}
        run: |
          cd app/build/ios/iphoneos
          TAG="${GITHUB_REF##*/}"
          ZIP_FILE="${{ env.PROJECT_NAME }}-iOS-arm64-${{ matrix.build_type }}-${TAG}.zip"
          zip -r "$ZIP_FILE" Runner.app
          ls -lh "$ZIP_FILE"

      - name: Publish Tagged Release (App)
        if: ${{ matrix.is_tagged && matrix.build_type == 'Release' }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          files: |
            app/build/ios/iphoneos/*-*${{ matrix.build_type }}*-*.*