name: ci-android
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
      - '*'
    branches:
      - main
      - develop

env:
  LLVM_VERSION: "19.1.2"
  VERBOSE: 1
  BUILD_DIR: ./test_repo/build


jobs:
  Test_android:
    name: ${{matrix.os}} ${{matrix.compiler}} ${{matrix.build_type}} ${{matrix.packaging_maintainer_mode == 'ON' && '(maintainer mode)' || ''}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-latest
        compiler:
          # you can specify the version after `-` like "llvm-18.1.8".
          - gcc
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
        packaging_maintainer_mode:
          - OFF
        build_shared:
          - ON
        is_tag:
          - ${{ startsWith(github.ref, 'refs/tags/') }}

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc
            gcov_executable: gcov
            enable_ipo: On

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            packaging_maintainer_mode: OFF
            package_generator: TBZ2

    steps:

      - uses: actions/checkout@v4

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}
          generator: ${{ matrix.generator }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'


      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          # It is important not to install llvm on macos, but use the one that comes with the system
          # Otherwise weird dyld errors will happen
          compiler: false
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          vcpkg: false
          ccache: false
          clangtidy: false
          cppcheck: false
          gcovr: false
          opencppcoverage: false

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27c
          add-to-path: true

      - name: Configure CMake
        run: |
          cmake -S ./test_repo -B ${{ env.BUILD_DIR }} \
            -G "${{matrix.generator}}" \
            -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }} \
            -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} \
            -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}} \
            -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} \
            -DGIT_SHA:STRING=${{ github.sha }} \
            -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ${{ env.BUILD_DIR }} --config ${{matrix.build_type}}

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ${{ env.BUILD_DIR}}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ${{ env.BUILD_DIR }} 
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v2
        if: ${{ matrix.is_tag && matrix.package_generator != '' }}
        with:
          token: ${{ secrets.GH_PAT }}
          files: |
            build/*-*${{ matrix.build_type }}*-*.*
          
      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml