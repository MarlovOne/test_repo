name: ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
      - '*'
    branches:
      - main
      - develop

env:
  LLVM_VERSION: "19.1.2"
  VERBOSE: 1


jobs:
  cancel:
    name: Cancel previous runs
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GH_PAT }}

  Test:
    name: ${{matrix.os}} ${{matrix.compiler}} ${{matrix.build_type}} ${{matrix.packaging_maintainer_mode == 'ON' && '(maintainer mode)' || ''}}
    runs-on: ${{ matrix.os }}
    needs:  cancel
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        compiler:
          # you can specify the version after `-` like "llvm-18.1.8".
          - llvm-19.1.2
          - gcc
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        packaging_maintainer_mode:
          - OFF
          # - ON
        build_shared:
          # - OFF
          - ON
        is_tagged:
          - ${{ startsWith(github.ref, 'refs/tags/') }}

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc
            gcov_executable: gcov
            enable_ipo: On

          - compiler: llvm-19.1.2
            gcov_executable: "llvm-cov gcov"
            enable_ipo: Off

          - os: macos-latest
            enable_ipo: Off

          # Set up preferred package generators, for given build configurations
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            compiler: msvc

        exclude:
          # Include only msvc for windows
          - os: windows-latest
            compiler: [gcc, llvm-19.1.2]

          # Include only llvm for macos
          - os: macos-latest
            compiler: gcc

          # Exclude Debug builds if tag is present - we aare packaging only release builds
          - is_tagged: true
            build_type: Debug
          
            # Exclude Release builds if tag is not present
          - is_tagged: false
            build_type: Release

    steps:

      - uses: actions/checkout@v4

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}
          generator: ${{ matrix.generator }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'


      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          # It is important not to install llvm on macos, but use the one that comes with the system
          # Otherwise weird dyld errors will happen
          compiler: ${{ !(contains(matrix.os, 'macos') && contains(matrix.compiler, 'llvm')) && matrix.compiler || '' }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.LLVM_VERSION }}
          cppcheck: true
          gcovr: true
          opencppcoverage: true

      - name: Configure CMake
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}} -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DGIT_SHA:STRING=${{ github.sha }}

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: CPack
        if: matrix.build_type == 'Release'
        working-directory: ./build
        run: |
            cpack -C ${{matrix.build_type}} -G ${{ contains(matrix.os, 'windows') && 'ZIP' || 'TBZ2' }}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v2
        if: ${{ matrix.is_tagged && matrix.build_type == 'Release' }}
        with:
          token: ${{ secrets.GH_PAT }}
          files: |
            build/*-*${{ matrix.build_type }}*-*.*
          
      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml