name: CI
on:
  push:
    tags:
      - '*'
    branches:
      - main
      - dev

jobs:

  Test:
    name: ${{matrix.os}} ${{matrix.compiler}} ${{matrix.build_type}} ${{matrix.architecture}} ${{matrix.packaging_maintainer_mode == 'ON' && '(maintainer mode)' || ''}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        compiler:
          # you can specify the version after `-` like "llvm-18.1.8".
          - llvm-19.1.2
          - gcc
          - msvc
        build_type:
          - Release
          - Debug
        packaging_maintainer_mode:
          # - OFF
          - ON
        architecture:
          - x86_64
          - arm64
        is_tagged:
          - ${{ startsWith(github.ref, 'refs/tags/') }}
        is_pr:
          - ${{ github.event_name == 'pull_request' }}

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc
            gcov_executable: gcov

          - compiler: llvm-19.1.2
            gcov_executable: "llvm-cov gcov"

        exclude:

          # Use only llvm for mac
          - os: macos-latest
            compiler: msvc

          - os: macos-latest
            compiler: gcc

          # Use only gcc for ubuntu
          - os: ubuntu-latest
            compiler: msvc

          - os: ubuntu-latest
            compiler: llvm-19.1.2

          # Use only msvc for windows
          - os: windows-latest
            compiler: llvm-19.1.2
          
          - os: windows-latest
            compiler: gcc

          # Exclude arm64 build for macos since we're building universal library
          - os: macos-latest
            architecture: arm64
          
          # Exclude Debug builds if tag is present - we aare packaging only release builds
          - is_tagged: true
            build_type: Debug
          
          # Exclude Release builds if tag is not present
          - is_tagged: false
            build_type: Release  
          
          # Remove arm builds for untagged commits
          - is_tagged: false
            architecture: arm64
            
    steps:

      - name: Checkout Repository 
        uses: actions/checkout@v4
 
      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}
      
      - name: Setup SSH Keys using webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          # It is important not to install llvm on macos, but use the one that comes with the system
          # Otherwise weird dyld errors will happen
          compiler: ${{ !(contains(matrix.os, 'macos') && contains(matrix.compiler, 'llvm')) && matrix.compiler || '' }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.LLVM_VERSION }}
          cppcheck: true
          gcovr: true
          opencppcoverage: true

      - name : Install deps (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++-aarch64-linux-gnu \
            libgstreamer-plugins-base1.0-dev \
            libgtk-3-dev \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libswscale-dev \
            libswresample-dev \
            libavfilter-dev
      
      - name : Install deps (Macos)
        if: matrix.os == 'macos-latest'
        run: |
          brew install \
            ffmpeg

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          ./scripts/make_linux.sh \
            --arch ${{ matrix.architecture }} \
            --build-type ${{ matrix.build_type }} \
            --maintainer-mode ${{ matrix.packaging_maintainer_mode }} \
            --enable-coverage ${{ matrix.build_type == 'Debug' }} \
            --git-sha ${{ github.sha }} \
            --build-dir ${{ env.BUILD_DIR }}
      
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        # A Note - OpenCV libraries are built in Release, thus the rest of the stuff
        # needs to be in a Release build as well, otherwise linking will fail
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          .\scripts\make_windows.ps1 `
            -arch ${{ matrix.architecture }} `
            -buildType Release `
            -maintainerMode ${{ matrix.packaging_maintainer_mode }} `
            -enableCoverage FALSE `
            -gitSha ${{ github.sha }} `
            -buildDir ${{ env.BUILD_DIR }}

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          ./scripts/make_macos.sh \
            --build-type ${{ matrix.build_type }} \
            --maintainer-mode ${{ matrix.packaging_maintainer_mode }} \
            --enable-coverage FALSE \
            --git-sha ${{ github.sha }} \
            --build-dir ${{ env.BUILD_DIR }}

      - name: Upload fixed Library
        uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: flir-sdk-fixed
          path: ./artifacts/macos/flir-sdk
  
      - name: Unix - Test and coverage
        if: runner.os != 'Windows' && matrix.architecture == 'x86_64'
        working-directory: ${{ env.BUILD_DIR }}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr --version
          
# TODO(lmark): doesn't work - fix later
# gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}' --verbose

      - name: Windows - Test and coverage
        if: runner.os == 'Windows' && matrix.architecture == 'x86_64'
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest -C Release

  # TODO(lmark): doesn't work - fix later
  # OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C Release

      - name: CPack
        if: matrix.build_type == 'Release'
        working-directory: ${{ env.BUILD_DIR }}
        run: |
            cpack -C ${{matrix.build_type}} -G ${{ contains(matrix.os, 'windows') && 'ZIP' || 'TBZ2' }}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v2
        if: ${{ matrix.is_tagged && matrix.build_type == 'Release' }}
        with:
          token: ${{ secrets.GH_PAT }}
          files: |
            ${{ env.BUILD_DIR }}/*-*${{ matrix.build_type }}*-*.*
          
      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ${{ env.BUILD_DIR }}/coverage.xml

      - name: Set Up Flutter
        if: ${{ matrix.architecture == 'x86_64' }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.4'
          channel: 'stable'
      
      - name: Install Flutter Dependencies
        if: ${{ matrix.architecture == 'x86_64' }}
        run: |
          cd blabla
          flutter pub get
          dart run ffigen --config ffigen.yaml

      # Cross-build from Linux x64 host to Linux arm64 target is not currently supported.
      - name: Build App (Linux)
        if: ${{ matrix.architecture == 'x86_64' && contains(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update && sudo apt-get -y install libgtk-3-0 libgtk-3-dev
          cd app
          flutter pub get
          flutter build linux \
            --${{ matrix.build_type == 'Release' && 'release' || 'debug' }} \
            --verbose
          ARCH=${{ matrix.architecture == 'arm64' && 'arm64' || 'x64' }}
          BUILD_TYPE=${{ matrix.build_type == 'Release' && 'release' || 'debug' }}
          echo "APP_PATH=app/build/linux/$ARCH/$BUILD_TYPE/bundle" >> $GITHUB_ENV

      # Flutter for windows doesn't seem to offer a support for cross-compilation
      - name: Build App (Windows)
        if: ${{ matrix.architecture == 'x86_64' && contains(matrix.os, 'windows') }}
        shell: powershell
        run: |
          cd app
          flutter pub get
          flutter build windows --release --verbose
          echo "APP_PATH=app/build/windows/x64/runner/${{ matrix.build_type }}" >> $env:GITHUB_ENV

      - name: Build App (macOS)
        if: ${{ contains(matrix.os, 'macos') }}
        run: |
          cd app
          flutter pub get
          flutter build macos --${{ matrix.build_type == 'Release' && 'release' || 'debug' }} --verbose
          echo "APP_PATH=app/build/macos/Build/Products/${{ matrix.build_type }}/${{ env.PROJECT_NAME }}.app" >> $GITHUB_ENV

      - name: Package app into zip
        if: ${{ matrix.is_tagged && matrix.build_type == 'Release' && matrix.architecture == 'x86_64' && !contains(matrix.os, 'windows') }}
        shell: bash
        run: |
          cd ${{ env.APP_PATH }}
          TAG="${GITHUB_REF##*/}"
          ZIP_FILE="${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.build_type }}-${TAG}.zip"
          zip -r "$ZIP_FILE" *
          ls -lh "$ZIP_FILE"
      
      - name: Package app into zip (windows, PowerShell)
        if: ${{ matrix.is_tagged && matrix.build_type == 'Release' && matrix.architecture == 'x86_64' && contains(matrix.os, 'windows') }}
        shell: pwsh
        run: |
          Write-Host "Changing to APP_PATH: $env:APP_PATH"
          Set-Location $env:APP_PATH
          $TAG = ($env:GITHUB_REF -split "/")[-1]
          $ZIP_FILE = "${env:PROJECT_NAME}-windows-${{ matrix.architecture }}-${{ matrix.build_type }}-$TAG.zip"
          Write-Host "Packaging into: $ZIP_FILE"
          Compress-Archive -Path .\* -DestinationPath $ZIP_FILE -Force
          Get-ChildItem $ZIP_FILE | Format-Table Name, Length

      - name: Publish Tagged Release (App)
        if: ${{ matrix.is_tagged && matrix.build_type == 'Release' }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          files: |
            ${{ env.APP_PATH }}/*-*${{ matrix.build_type }}*-*.*
